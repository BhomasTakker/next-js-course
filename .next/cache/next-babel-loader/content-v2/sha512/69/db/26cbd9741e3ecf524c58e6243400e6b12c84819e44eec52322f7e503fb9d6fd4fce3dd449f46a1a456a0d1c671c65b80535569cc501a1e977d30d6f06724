{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport mater from \"gray-matter\";\nimport matter from \"gray-matter\";\nconst postsDirectory = path.join(process.cwd(), \"posts\");\nexport const getPostData = filename => {\n  const filePath = path.jpin(postsDirectory, filename);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n  const {\n    data,\n    content\n  } = matter(fileContent);\n  const postSlug = filename.replace(/\\.md$/, \"\");\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n};\nexport const getAllPosts = () => {\n  const postFiles = fs.readdirSync(postsDirectory);\n  const allPosts = postFiles.map(postFile => getPostData(postFile));\n  const sortedPosts = allPosts.sort((postA, postB) => postA.date > postB.date ? -1 : 1);\n  return sortedPosts;\n};\nexport const getFeaturedPosts = () => {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n};","map":{"version":3,"sources":["/Users/thomas.bakker/Desktop/Udemy/next-js/nextjs-project/lib/post-util.js"],"names":["fs","path","mater","matter","postsDirectory","join","process","cwd","getPostData","filename","filePath","jpin","fileContent","readFileSync","data","content","postSlug","replace","postData","slug","getAllPosts","postFiles","readdirSync","allPosts","map","postFile","sortedPosts","sort","postA","postB","date","getFeaturedPosts","featuredPosts","filter","post","isFeatured"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,MAAMC,WAAW,GAAIC,QAAD,IAAc;AACvC,QAAMC,QAAQ,GAAGT,IAAI,CAACU,IAAL,CAAUP,cAAV,EAA0BK,QAA1B,CAAjB;AACA,QAAMG,WAAW,GAAGZ,EAAE,CAACa,YAAH,CAAgBH,QAAhB,EAA0B,OAA1B,CAApB;AACA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBZ,MAAM,CAACS,WAAD,CAAhC;AAEA,QAAMI,QAAQ,GAAGP,QAAQ,CAACQ,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAjB;;AAEA,QAAMC,QAAQ;AACZC,IAAAA,IAAI,EAAEH;AADM,KAETF,IAFS;AAGZC,IAAAA;AAHY,IAAd;;AAMA,SAAOG,QAAP;AACD,CAdM;AAgBP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC/B,QAAMC,SAAS,GAAGrB,EAAE,CAACsB,WAAH,CAAelB,cAAf,CAAlB;AAEA,QAAMmB,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAcjB,WAAW,CAACiB,QAAD,CAAvC,CAAjB;AAEA,QAAMC,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAACC,KAAD,EAAQC,KAAR,KAChCD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CADb,CAApB;AAIA,SAAOJ,WAAP;AACD,CAVM;AAYP,OAAO,MAAMK,gBAAgB,GAAG,MAAM;AACpC,QAAMR,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMY,aAAa,GAAGT,QAAQ,CAACU,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,UAA/B,CAAtB;AAEA,SAAOH,aAAP;AACD,CALM","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport mater from \"gray-matter\";\nimport matter from \"gray-matter\";\n\nconst postsDirectory = path.join(process.cwd(), \"posts\");\n\nexport const getPostData = (filename) => {\n  const filePath = path.jpin(postsDirectory, filename);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n  const { data, content } = matter(fileContent);\n\n  const postSlug = filename.replace(/\\.md$/, \"\");\n\n  const postData = {\n    slug: postSlug,\n    ...data,\n    content,\n  };\n\n  return postData;\n};\n\nexport const getAllPosts = () => {\n  const postFiles = fs.readdirSync(postsDirectory);\n\n  const allPosts = postFiles.map((postFile) => getPostData(postFile));\n\n  const sortedPosts = allPosts.sort((postA, postB) =>\n    postA.date > postB.date ? -1 : 1\n  );\n\n  return sortedPosts;\n};\n\nexport const getFeaturedPosts = () => {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter((post) => post.isFeatured);\n\n  return featuredPosts;\n};\n"]},"metadata":{},"sourceType":"module"}